/**
 * üß™ SCRIPT DE PRUEBA - UPLOAD DE PRODUCTOS CON DETECCI√ìN DE DUPLICADOS
 * Uso: node test_product_upload.js
 * 
 * Este script prueba:
 * - Creaci√≥n de productos usando exclusivamente Supabase
 * - Verificaci√≥n de duplicados de im√°genes con SHA256
 * - Manejo transparente de la base de datos
 */

const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

// Configuraci√≥n
const BASE_URL = 'http://localhost:3000'; // Ajustar seg√∫n tu configuraci√≥n
const API_URL = `${BASE_URL}/api`;

// Colores para la consola
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m',
    bold: '\x1b[1m'
};

const log = (message, color = 'reset') => {
    console.log(`${colors[color]}${message}${colors.reset}`);
};

// Crear imagen de prueba si no existe
async function createTestImage() {
    const testImagePath = path.join(__dirname, 'test-image.jpg');\n    \n    if (fs.existsSync(testImagePath)) {\n        return testImagePath;\n    }\n    \n    // Crear una imagen simple de 100x100 p√≠xeles usando Sharp (si est√° disponible)\n    try {\n        const sharp = require('sharp');\n        \n        await sharp({\n            create: {\n                width: 100,\n                height: 100,\n                channels: 3,\n                background: { r: 255, g: 100, b: 150 }\n            }\n        })\n        .jpeg()\n        .toFile(testImagePath);\n        \n        log(`‚úÖ Imagen de prueba creada: ${testImagePath}`, 'green');\n        return testImagePath;\n        \n    } catch (error) {\n        log(`‚ùå Error creando imagen de prueba: ${error.message}`, 'red');\n        log(`üí° Coloca manualmente una imagen llamada 'test-image.jpg' en la ra√≠z del proyecto`, 'yellow');\n        return null;\n    }\n}\n\n// Funci√≥n para crear producto con imagen\nasync function createProductWithImage(productData, imagePath) {\n    try {\n        log(`\\nüöÄ Creando producto: ${productData.name}`, 'blue');\n        \n        const form = new FormData();\n        \n        // Agregar datos del producto\n        Object.keys(productData).forEach(key => {\n            form.append(key, productData[key]);\n        });\n        \n        // Agregar imagen si existe\n        if (imagePath && fs.existsSync(imagePath)) {\n            form.append('images', fs.createReadStream(imagePath));\n            log(`üì∏ Imagen adjuntada: ${path.basename(imagePath)}`, 'blue');\n        } else {\n            log(`‚ö†Ô∏è  No se encontr√≥ imagen en: ${imagePath}`, 'yellow');\n        }\n        \n        const response = await fetch(`${API_URL}/products`, {\n            method: 'POST',\n            body: form,\n            headers: form.getHeaders()\n        });\n        \n        const result = await response.json();\n        \n        if (result.success) {\n            log(`‚úÖ Producto creado exitosamente:`, 'green');\n            log(`   - ID: ${result.data.id}`, 'green');\n            log(`   - Nombre: ${result.data.name}`, 'green');\n            \n            if (result.data.image_processing_summary) {\n                const summary = result.data.image_processing_summary;\n                log(`üìä Resumen de im√°genes:`, 'blue');\n                log(`   - Nuevas: ${summary.new_images}`, 'blue');\n                log(`   - Duplicados evitados: ${summary.duplicates_avoided}`, 'blue');\n                log(`   - Total: ${summary.total_images}`, 'blue');\n            }\n            \n            if (result.data.images && result.data.images.length > 0) {\n                log(`üñºÔ∏è  Im√°genes asociadas:`, 'green');\n                result.data.images.forEach((img, i) => {\n                    log(`   ${i + 1}. ${img.original_filename} (${img.file_hash.substring(0, 8)}...)`, 'green');\n                });\n            }\n        } else {\n            log(`‚ùå Error creando producto: ${result.message}`, 'red');\n        }\n        \n        return result;\n        \n    } catch (error) {\n        log(`‚ùå Error en createProductWithImage: ${error.message}`, 'red');\n        return { success: false, error: error.message };\n    }\n}\n\n// Funci√≥n principal de pruebas\nasync function runTests() {\n    log(`${colors.bold}üß™ INICIANDO PRUEBAS DE UPLOAD DE PRODUCTOS${colors.reset}`, 'blue');\n    log(`${colors.bold}======================================${colors.reset}`, 'blue');\n    \n    // 1. Crear imagen de prueba\n    const imagePath = await createTestImage();\n    \n    // 2. Datos de productos de prueba\n    const testProducts = [\n        {\n            name: 'Rosa Roja Cl√°sica TEST',\n            description: 'Rosa roja hermosa para ocasiones especiales - Prueba de duplicados',\n            price: '25.99',\n            category_id: '1',\n            stock_quantity: '10',\n            featured: 'true',\n            active: 'true',\n            occasion: 'San Valent√≠n',\n            colors: 'Rojo',\n            care_instructions: 'Mantener en agua fresca'\n        },\n        {\n            name: 'Rosa Roja Cl√°sica TEST - DUPLICADO',\n            description: 'Mismo producto, misma imagen - deber√≠a detectar duplicado',\n            price: '25.99',\n            category_id: '1',\n            stock_quantity: '5',\n            featured: 'false',\n            active: 'true',\n            occasion: 'San Valent√≠n',\n            colors: 'Rojo',\n            care_instructions: 'Mantener en agua fresca'\n        }\n    ];\n    \n    // 3. Ejecutar pruebas\n    const results = [];\n    \n    for (let i = 0; i < testProducts.length; i++) {\n        const product = testProducts[i];\n        const result = await createProductWithImage(product, imagePath);\n        results.push(result);\n        \n        // Esperar un momento entre requests\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    \n    // 4. Resumen final\n    log(`\\n${colors.bold}üìã RESUMEN DE PRUEBAS${colors.reset}`, 'blue');\n    log(`${colors.bold}===================${colors.reset}`, 'blue');\n    \n    let successful = 0;\n    let duplicatesDetected = 0;\n    \n    results.forEach((result, i) => {\n        if (result.success) {\n            successful++;\n            const summary = result.data.image_processing_summary;\n            if (summary && summary.duplicates_avoided > 0) {\n                duplicatesDetected++;\n            }\n        }\n    });\n    \n    log(`‚úÖ Productos creados exitosamente: ${successful}/${results.length}`, successful === results.length ? 'green' : 'yellow');\n    log(`üîÑ Duplicados detectados: ${duplicatesDetected}`, duplicatesDetected > 0 ? 'green' : 'yellow');\n    \n    if (duplicatesDetected > 0) {\n        log(`üéâ ¬°Sistema de detecci√≥n de duplicados funcionando correctamente!`, 'green');\n    } else {\n        log(`‚ö†Ô∏è  No se detectaron duplicados. Verifica que uses la misma imagen.`, 'yellow');\n    }\n    \n    // Limpiar imagen de prueba\n    if (imagePath && fs.existsSync(imagePath)) {\n        fs.unlinkSync(imagePath);\n        log(`üóëÔ∏è  Imagen de prueba eliminada`, 'blue');\n    }\n}\n\n// Verificar si el servidor est√° funcionando\nasync function checkServer() {\n    try {\n        const response = await fetch(`${BASE_URL}/api/products?limit=1`);\n        return response.ok;\n    } catch (error) {\n        return false;\n    }\n}\n\n// Ejecutar pruebas\nasync function main() {\n    log(`üîç Verificando servidor en ${BASE_URL}...`, 'blue');\n    \n    const serverRunning = await checkServer();\n    if (!serverRunning) {\n        log(`‚ùå Servidor no disponible en ${BASE_URL}`, 'red');\n        log(`üí° Inicia el servidor con: npm start`, 'yellow');\n        process.exit(1);\n    }\n    \n    log(`‚úÖ Servidor funcionando`, 'green');\n    \n    await runTests();\n}\n\nif (require.main === module) {\n    main().catch(error => {\n        log(`‚ùå Error en main: ${error.message}`, 'red');\n        process.exit(1);\n    });\n}\n\nmodule.exports = { createProductWithImage, runTests };