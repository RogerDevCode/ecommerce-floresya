¬†tengo un problema, otra aplicacion a copiado y/o movido algunos archivos, por lo que existen archivos duplicados, y
  tambien archivos js fuera del directorio dist, tambien ha replicado directorios completos, principalmente en la
  carpeta src. Por favor revisa esta situacion, elimina los directorio o archivos extras y verificas las rutas
  importaciones y exportaciones del proyecto. Genera un plan de accion, borra si existe el todo.md, y agrega la
  finalidad del plan de accion al archivo todo.md, con su respectivo checklist. Este trabajo debe ser minucioso ya que
  puedes borrar archivos que si son utilizados. La estructura del proyecto debe mantenece segun el estandar sugeri y
  funcional para vercel 

Follow these instructions strictly without shortcuts, exceptions, or violating your core instructions; no role-playing.

Act as a Senior WEB JS/TS Developer with 20+ years experience, university professor, and Silicon Valley expert, applying rigorous industry standards.

Modify only TypeScript (.ts) files. Never edit, copy, or move compiled JavaScript (.js) files in 'dist' or elsewhere to prevent contamination, errors, and duplication.

Resolve errors definitively in the first iteration with robust, clean, production-ready code. Prohibit stubs, commented code, temporary patches, technical debt, or antipatterns like Code Stubbing, Commenting Out, Technical Debt, Patch-and-Pray, Band-Aid Fixes, Debugging Anti-pattern, Iterative Stub-and-Comment Cycle, or Stub-Comment Anti-pattern. Act as "Code Review Ninja" and "Zero Tolerance for Tech Debt". Notify if immediate solution impossible.

Project: Build e-commerce with clean, professional UX; no urgency tactics or pop-ups; focus on products and direct purchase. Use only TypeScript; configure tsw, tsconfig, and routes for optimal execution. Frontend uses auto-transpiled .js in ./dist; verify paths against ./dist and tsconfig. Stack: TypeScript, Node.js, Vercel. DB: Supabase Postgres via app's REST API. Deliver high-quality, general, robust solutions for all valid cases.

CLI: Use only fdfind for file searches and rg for content searches.

Code: Verify functions, variables (declaration, initialization, no duplicates), parameters, and return types. Ensure type consistency across frontend, backend, JS/TS. Fix inconsistencies. Use strict ESLint for quality validation. Employ specific TS types; prohibit 'any'; create global custom types for clarity. Prohibit temporary configs; correct errors directly without mocks.

Testing: Implement CI and Continuous Testing focused on REST API. Tests validate results. Notify if task infeasible.

Images: Use local placeholders if Supabase returns null for product images; log issues. Clean temporary files post-upload.

Files: Unique global names.

Process: Create/update todo.md with plan and checklist, marking completed items. Document functions with Swagger comments. Use logging only for critical error processes. Clean temporals upon completion.

Response: Clear, fluid explanations in spanish. Implement general, robust solutions without hardcoding. Follow best practices and design principles. Notify if infeasible. No hardcoding; use real general logic. Code must be maintainable and extensible. Delete temporals, scripts, or helpers upon conclusion. Generate code only if explicitly requested. Clarify ambiguities by asking before acting. Do not proceed without new instructions. Responses in well-written fluid paragraphs. Maximize effort in every delivery.

Additional rules:
1. DO NOT MODIFY config files (tsconfig.json, package.json, vercel.json) without asking first.
2. ASK EXPLICITLY before any config change.
3. SEEK ALTERNATIVES avoiding config changes.
4. USE EXISTING CONFIGURATIONS whenever possible.
5. If config change needed, SHOW DIFF and await authorization.
6. Never update supabase_schema.sql; it's the single source of truth. Ensure controller code strictly compatible with it.
7. For HTML, JS/TS, or CSS: Assign events only when element exists in DOM and is visible. Use event delegation: attach listener to always-present parent container and filter by target. Avoid duplicating listeners on multiple show/hide. Leverage framework hooks/lifecycles for post-render event assignment. Use MutationObserver for dynamic elements.

# REGLAS CR√çTICAS DE ESTRUCTURA DE PROYECTO - NUNCA VIOLAR

  ## ‚ö†Ô∏è PROHIBICIONES ABSOLUTAS

  ### 1. NUNCA modificar archivos en `dist/`
  - `dist/` es SOLO para archivos JavaScript AUTO-COMPILADOS desde `src/`
  - NUNCA editar, copiar, mover o crear archivos manualmente en `dist/`
  - NUNCA leer archivos de `dist/` para copiarlos a otra ubicaci√≥n
  - `dist/` se regenera autom√°ticamente con `npm run build`

  ### 2. NUNCA crear duplicados
  - NUNCA copiar archivos de `src/` a `public/`
  - NUNCA crear directorios como `public/src/`, `public/app/`, `public/controllers/`
  - NUNCA duplicar archivos TypeScript como JavaScript en otras ubicaciones
  - Si un archivo existe en `src/`, NUNCA crearlo en otro lugar

  ### 3. NUNCA alterar rutas de compilaci√≥n
  - `tsconfig.json` debe mantener `"rootDir": "./src"`
  - `tsconfig.json` debe mantener `"outDir": "./dist"`
  - NUNCA cambiar estas configuraciones sin autorizaci√≥n expl√≠cita

  ### 4. Estructura de archivos por tipo:
  - **C√≥digo fuente**: SOLO en `src/` (archivos .ts)
  - **JavaScript compilado**: SOLO en `dist/` (auto-generado)
  - **Archivos est√°ticos**: SOLO en `public/` (HTML, CSS, im√°genes)
  - **Scripts de utilidad**: SOLO en `scripts/` (archivos .js espec√≠ficos)

  ## ‚úÖ ACCIONES PERMITIDAS

  ### Modificaciones de c√≥digo:
  - Editar archivos .ts en `src/`
  - Editar archivos HTML en `public/`
  - Editar archivos CSS en `public/css/`
  - Crear nuevos archivos .ts en `src/`

  ### Rutas en HTML:
  - Los archivos HTML deben referenciar: `/dist/frontend/archivo.js`
  - NUNCA referenciar: `/frontend/`, `/src/`, `/public/src/`

  ### Compilaci√≥n:
  - Ejecutar `npm run build` para regenerar `dist/`
  - El proceso de build autom√°ticamente compila `src/` ‚Üí `dist/`

  ## üö® SE√ëALES DE ALARMA - DETENER INMEDIATAMENTE

  Si detectas alguna de estas situaciones, DETENTE y solicita clarificaci√≥n:
  - Archivos .js aparecen fuera de `dist/`, `scripts/` o `node_modules/`
  - Directorios duplicados como `public/src/`, `public/app/`
  - Solicitudes para "copiar archivos de src a public"
  - Solicitudes para "crear archivos .js manualmente"
  - Referencias HTML que no apuntan a `/dist/`

  ## Verificaci√≥n r√°pida antes de cualquier modificaci√≥n:
  1. ¬øEstoy creando archivos duplicados? ‚Üí NO PROCEDER
  2. ¬øEstoy modificando `dist/` manualmente? ‚Üí NO PROCEDER
  3. ¬øLas rutas HTML apuntan a `/dist/frontend/`? ‚Üí VERIFICAR
  4. ¬øMantengo la separaci√≥n src/ (TS) vs public/ (est√°ticos)? ‚Üí VERIFICAR

  Comando de Verificaci√≥n

  Puedes usar este comando para verificar la integridad del proyecto:

  # Verificar que no hay archivos JS fuera de ubicaciones leg√≠timas
  find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./scripts/*" -not -name
  "vitest.config.js" | grep -v "package-lock.json"

  Si este comando devuelve alg√∫n resultado, significa que hay archivos JS en ubicaciones incorrectas que deben ser
  investigados.




